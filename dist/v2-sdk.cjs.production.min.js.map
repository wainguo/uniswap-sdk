{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n//export const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const FACTORY_ADDRESS = '0xbaa3E3C850c7A33f5129478C7E923b33c418C264'\n\n//export const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\nexport const INIT_CODE_HASH = '4dc202e7102add782883956e91a59c07bb328b95aec453c5c484ecbc49f225bf'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, ChainId, Price, sqrt, Token, TokenAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId | number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId, Currency, ETHER, Price, Token, WETH9 } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n\n  public get midPrice(): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: ChainId | number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const weth: Token | undefined = WETH9[chainId as ChainId]\n\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && weth && pairs[0].involvesToken(weth)),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && weth && pairs[pairs.length - 1].involvesToken(weth)),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : weth]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId | number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  currencyEquals,\n  ETHER,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  Token,\n  TokenAmount,\n  TradeType,\n  WETH9\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH9[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH9[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = new Route(nextPairs, route.input).midPrice\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { CurrencyAmount, ETHER, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from 'entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","getCreate2Address","keccak256","pack","address","Pair","tokenAmountA","tokenAmountB","tokenAmounts","token","liquidityToken","Token","chainId","getAddress","involvesToken","equals","this","token0","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","raw","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","TokenAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","Route","pairs","input","output","length","every","pair","weth","WETH9","ETHER","path","entries","currentInput","push","prices","currency","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","currencyEquals","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","wrappedAmount","currencyAmount","wrappedCurrency","Trade","amount","tradeType","exactQuote","slippage","amounts","Array","nextPairs","TradeType","EXACT_INPUT","i","nextPair","CurrencyAmount","ether","EXACT_OUTPUT","executionPrice","nextMidPrice","midPrice","Percent","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","quotient","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","toString","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","value","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}